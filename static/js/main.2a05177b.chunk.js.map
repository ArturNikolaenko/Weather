{"version":3,"sources":["api/OpenWeatherMapApi.js","data/OpenWeatherAdapter.js","storage/WeatherStorage.js","components/RadioGroup.jsx","components/Header.jsx","components/TempWidget.jsx","components/WindWidget.jsx","App.jsx","serviceWorker.js","index.js"],"names":["API_KEY","buildUnitsParam","units","adapter","city","a","Error","url","fetch","then","res","json","cod","createWeatherData","rawData","dateFromUnix","unixSeconds","timezone","Date","location","localDate","dt","lon","coord","lat","name","country","sys","sunrise","sunset","condition","weather","map","cond","main","description","wind","speed","direction","deg","temp","feelsLike","feels_like","pressure","humidity","cloudiness","clouds","all","visibility","e","lastParsed","DATE_FORMAT","dateReviewer","key","value","test","isFresh","sessionStorage","getItem","isDifferentUnits","isDifferentLocation","RadioGroup","values","def","changeHandler","className","val","label","type","checked","onChange","radioContainer","Header","date","locationSetter","unitsSetter","props","useState","showInput","setShowInput","commitLocation","event","keyCode","target","autoFocus","placeholder","onKeyUp","onBlur","onClick","toLocaleString","TempWidget","acutalTemp","getTempUnits","parseFloat","toFixed","WindWidget","windSpeed","windDirection","style","transform","getWindUnits","App","setWeather","setUnits","setCity","useEffect","storage","fetchWeather","weatherAdapter","weatherData","setItem","JSON","stringify","parse","index","length","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a05177b.chunk.js","sourcesContent":["const API_KEY = \"def7c8667a42018923e351364064d95d\";\n\nfunction buildUnitsParam(units) {\n  if (!units) {\n    return \"\";\n  }\n\n  // if (units != \"metric\" || units != \"imperial\") {\n  //   throw new Error(\n  //     'Illegal units specified. Possible values are: \"metric\"|\"imperial\"|undefined.'\n  //   );\n  // }\n\n  switch (units) {\n    case \"metric\":\n      return \"&units=metric\";\n    case \"imperial\":\n      return \"&units=imperial\";\n    default:\n      return \"\";\n  }\n}\n\n/**\n * @param {*} adapter adpter to adapt api response to iternal weather structure.\n * @param {string} city city for which to fetch weather.\n * @param {\"metric\"|\"imperial\"|undefined} units Meausurement units to use.\n * @returns {Promise} fetched weather object.\n */\nexport default async function fetchWeather(adapter, city, units) {\n  if (!city) {\n    throw new Error(\"No location provided\");\n  }\n\n  if (typeof city != \"string\") {\n    throw new Error(\"city must be a string\");\n  }\n\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}${buildUnitsParam(\n    units\n  )}`;\n\n  return fetch(url)\n    .then((res) => {\n      return res.json();\n    })\n    .then((json) => {\n      if (json.cod === \"404\") {\n        throw new Error(`Wrong url format or location (${city})`);\n      }\n      return adapter(json);\n    });\n}\n","export default function createWeatherData(rawData) {\n  if (!rawData) {\n    throw new Error(\"Empty data given\");\n  }\n\n  function dateFromUnix(unixSeconds, timezone = rawData.timezone) {\n    return new Date(unixSeconds * 1000 + timezone * 1000);\n  }\n\n  try {\n    return {\n      location: {\n        localDate: dateFromUnix(rawData.dt),\n        lon: rawData.coord.lon,\n        lat: rawData.coord.lat,\n        city: rawData.name,\n        country: rawData.sys.country,\n        sunrise: dateFromUnix(rawData.sys.sunrise),\n        sunset: dateFromUnix(rawData.sys.sunset),\n      },\n      condition: rawData.weather.map((cond) => {\n        return {\n          name: rawData.weather[0].main,\n          description: rawData.weather[0].description,\n        };\n      }),\n      wind: {\n        speed: rawData.wind.speed,\n        direction: rawData.wind.deg,\n      },\n      temp: rawData.main.temp,\n      feelsLike: rawData.main.feels_like,\n      pressure: rawData.main.pressure,\n      humidity: rawData.main.humidity,\n      cloudiness: rawData.clouds.all,\n      visibility: rawData.visibility / 1000,\n    };\n  } catch (e) {\n    throw new Error(\"Illegal data format.\");\n  }\n}\n","const STORAGE_KEY = \"CURRENT_WEATHER\";\nconst LOCATION_KEY = \"LAST_STORED_LOCATION\";\nconst TIME_KEY = \"LAST_STORED_TIME\";\nconst UNITS_KEY = \"LAST_STORED_UNITS\";\nconst TIME_GAP = 600000;\nconst DATE_FORMAT = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\n\nlet lastParsed;\n\nfunction dateReviewer(key, value) {\n  if (typeof value === \"string\" && DATE_FORMAT.test(value)) {\n    return new Date(value);\n  }\n\n  return value;\n}\n\nexport function fetch() {\n  if (isFresh() && lastParsed) {\n    return lastParsed;\n  }\n\n  let weatherData = sessionStorage.getItem(STORAGE_KEY);\n  lastParsed = JSON.parse(weatherData, dateReviewer);\n  return lastParsed;\n}\n\nfunction getLastLocation() {\n  return sessionStorage.getItem(LOCATION_KEY);\n}\n\nfunction getLastUnits() {\n  return sessionStorage.getItem(UNITS_KEY);\n}\n\nfunction getLastTime() {\n  return new Date(sessionStorage.getItem(TIME_KEY));\n}\n\nexport function isFresh() {\n  return new Date() - getLastTime() < TIME_GAP;\n}\n\nexport function isDifferentUnits(units) {\n  return getLastUnits() != units;\n}\n\nexport function isDifferentLocation(location) {\n  return location !== getLastLocation();\n}\n\nexport function store(weatherData, units) {\n  sessionStorage.setItem(TIME_KEY, weatherData.location.localDate);\n  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(weatherData));\n  sessionStorage.setItem(LOCATION_KEY, weatherData.location.city);\n  sessionStorage.setItem(UNITS_KEY, units);\n}\n","import React, { useEffect } from \"react\";\nimport \"./RadioGroup.css\";\n\nexport default function RadioGroup({\n  name,\n  values,\n  def,\n  changeHandler,\n  ...props\n}) {\n  function radioContainer(value) {\n    let label, val;\n\n    if (typeof value === \"object\") {\n      label = value.label;\n      val = value.value;\n    } else if (typeof value === \"string\") {\n      val = value;\n    }\n\n    return (\n      <label className=\"radio__container\" key={val}>\n        <input\n          type=\"radio\"\n          name={name}\n          value={val}\n          checked={val === def}\n          onChange={changeHandler}\n        />\n        <span className=\"radio__button\">{val}</span>\n      </label>\n    );\n  }\n\n  return (\n    <div className=\"radio\">{values.map((val) => radioContainer(val))}</div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./Header.css\";\nimport RadioGroup from \"./RadioGroup\";\n\n/**\n * @param {string} city\n * @param {string} country\n * @param {Date} date\n */\nexport default function Header({\n  city,\n  country,\n  date,\n  locationSetter,\n  units,\n  unitsSetter,\n  ...props\n}) {\n  const [showInput, setShowInput] = useState(false);\n\n  function commitLocation(event) {\n    if (event.key === \"Enter\" || event.keyCode === 13) {\n      locationSetter(event.target.value);\n      setShowInput(false);\n    } else if (event.keyCode === 27 || event.key === \"Escape\") {\n      setShowInput(false);\n    }\n  }\n\n  function locationView() {\n    if (showInput) {\n      return (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"location-input\"\n          placeholder={city}\n          onKeyUp={commitLocation}\n          onBlur={(e) => {\n            setShowInput(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <span className=\"header__location\" onClick={() => setShowInput(true)}>\n          {city}, {country}\n        </span>\n      );\n    }\n  }\n\n  return (\n    <header className=\"header\" {...props}>\n      <div className=\"header__layout\">\n        {locationView()}\n        <span className=\"header__date\">{date.toLocaleString()}</span>\n      </div>\n      <RadioGroup\n        name=\"units\"\n        values={[\"metric\", \"imperial\"]}\n        def={units}\n        changeHandler={(event) => {\n          unitsSetter(event.target.value);\n        }}\n      />\n    </header>\n  );\n}\n","import React from \"react\";\nimport \"./TempWidget.css\";\n\nexport default function TempWidget({ acutalTemp, feelsLike, units, ...props }) {\n  function getTempUnits() {\n    switch (units) {\n      case \"metric\":\n        return \"°C\";\n      case \"imperial\":\n        return \"°F\";\n      default:\n        return \"°K\";\n    }\n  }\n\n  return (\n    <div className=\"temp-widget\">\n      <div>\n        <h1 className=\"temp-widget__view\">\n          {parseFloat(acutalTemp).toFixed(0)}\n          {getTempUnits()}\n        </h1>\n        <span className=\"temp-widget__feels-like\">\n          Feels like:&nbsp;{parseFloat(feelsLike).toFixed(0)}\n          {getTempUnits()}\n        </span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./WindWidget.css\";\n\nexport default function WindWidget({\n  windSpeed,\n  windDirection,\n  units,\n  ...props\n}) {\n  function getWindUnits() {\n    switch (units) {\n      case \"metric\":\n        return \"m/s\";\n      case \"imperial\":\n        return \"mph\";\n      default:\n        return \"\";\n    }\n  }\n\n  return (\n    <div className=\"wind-widget\">\n      <div className=\"wind-widget__gauge\">\n        <span className=\"wind-widget__label nord\">N</span>\n        <span className=\"wind-widget__label east\">E</span>\n        <span className=\"wind-widget__label south\">S</span>\n        <span className=\"wind-widget__label west\">W</span>\n        <div\n          className=\"arrow\"\n          style={{ transform: `rotate(${windDirection}deg)` }}\n        >\n          <div className=\"arrow__top\" />\n        </div>\n      </div>\n      <h3 className=\"wind-widget__speed\">\n        {windSpeed} {getWindUnits()}\n      </h3>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport fetchWeather from \"./api/OpenWeatherMapApi\";\nimport weatherAdapter from \"./data/OpenWeatherAdapter\";\nimport * as storage from \"./storage/WeatherStorage\";\n\nimport Header from \"./components/Header\";\nimport TempWidget from \"./components/TempWidget\";\nimport WindWidget from \"./components/WindWidget\";\n\nexport default function App() {\n  const [weather, setWeather] = useState(null);\n  const [units, setUnits] = useState(\"imperial\");\n  const [city, setCity] = useState(\"Odessa\");\n\n  useEffect(() => {\n    if (\n      storage.isFresh() &&\n      !storage.isDifferentLocation(city) &&\n      !storage.isDifferentUnits(units)\n    ) {\n      setWeather(storage.fetch());\n    } else {\n      fetchWeather(weatherAdapter, city, units).then((res) => {\n        setWeather(res);\n        storage.store(res);\n      });\n    }\n  }, [city, units]);\n\n  if (weather) {\n    return (\n      <div className=\"App\">\n        <main>\n          <Header\n            country={weather.location.country}\n            city={weather.location.city}\n            date={new Date().toLocaleString()}\n            locationSetter={setCity}\n            units={units}\n            unitsSetter={setUnits}\n          />\n          <div>\n            <span className=\"condition\">\n              {weather.condition.map((cond, index) => {\n                if (index !== weather.condition.length - 1)\n                  return cond.description + \", \";\n                else return cond.description + \".\";\n              })}\n            </span>\n            <hr />\n            <div className=\"widget-layout\">\n              <TempWidget\n                acutalTemp={weather.temp}\n                feelsLike={weather.feelsLike}\n                units={units}\n              />\n              <div className=\"weather-data\">\n                <span className=\"label\">Humidity: {weather.humidity}%</span>\n                <span className=\"label\">Pressure: {weather.pressure} hPa</span>\n                <span className=\"label\">\n                  Visibility: {weather.visibility} km\n                </span>\n                <span className=\"label\">\n                  Cloudiness: {weather.cloudiness} %\n                </span>\n              </div>\n              <WindWidget\n                windDirection={weather.wind.direction}\n                units={units}\n                windSpeed={weather.wind.speed}\n              />\n            </div>\n            <hr />\n          </div>\n        </main>\n      </div>\n    );\n  } else {\n    return <h1>No data</h1>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}